#!/usr/bin/env zsh

# A wrapper for /setup/docker

set -e

# parse option {{{
usage() {
    cat <<- 'EOU'
	Usage: nmk-inject [OPTIONS] IMAGE[:TAG] [REPOSITORY[:TAG]]

	  Options
	    -d, --distro            Type of linux distribution, debian, ubuntu or fedora.
	    -p, --proxy             Use docker apt proxy (172.17.0.1:3142)
	        --proxy-uri         Specify custom proxy, imply --proxy (-p)
	                            for example, 127.0.0.1:3142
	    -u, --update            Update apt package index
	        --keep-index-files  Do not cleanup package index files
	    -U, --upgrade           Upgrade apt packages, imply --update (-u)
	    -i, --ignore            Ignore package update errors
	    -h, --help              Print this help message
EOU
}

if ! TEMP=$(getopt -q -o d:puUih --long distro:,proxy,proxy-uri:,update,keep-index-files,upgrade,ignore,help -- "$@"); then
    usage
    exit 1
fi

eval set -- $TEMP

_ENV=()
while true; do
    case $1 in
        -d | --distro ) _ENV+=(-e DISTRO=$2); shift 2 ;;
        -p | --proxy ) _ENV+=(-e APT_PROXY=1); shift ;;
        --proxy-uri) _ENV+=(-e APT_PROXY=1 -e APT_PROXY_URI=$2); shift 2 ;;
        -u | --update ) _ENV+=(-e APT_UPDATE=1); shift ;;
        --keep-index-files) _ENV+=(-e APT_KEEP_INDEX_FILES=1); shift ;;
        -U | --upgrade ) _ENV+=(-e APT_UPDATE=1 -e APT_UPGRADE=1); shift ;;
        -i | --ignore ) _ENV+=(-e APT_IGNORE_UPDATE_ERRORS=1); shift ;;
        -h | --help ) usage; exit 0 ;;
        -- ) shift; break ;;
    esac
done
# }}}

if [[ -z $1 ]]; then
    usage
    exit 1
fi

# sudo if user is not member of docker group
[[ ${$(id -Gn)[(r)docker]} == docker ]] && _DOCKER=docker || _DOCKER=(sudo docker)

RUN() {
    print -- ">> ${(q)@:q}"
    "$@"
}

gen_restore_script() {
cat << EOF
#!/usr/bin/env python
import json
import os

parent ='$1'
nmk = '$2'

base_json_file = os.path.join('image', parent, 'json')
nmk_json_file = os.path.join('image', nmk, 'json')

base_metadata = json.loads(open(base_json_file).read())
nmk_metadata = json.loads(open(nmk_json_file).read())

created_by = [
    "/bin/sh",
    "-c",
    "#(nop)"
]

nmk_metadata['config']['Cmd'] = base_metadata['config']['Cmd']
nmk_metadata['container_config']['Cmd'] = created_by

for key in ('Entrypoint', 'Env', 'OnBuild'):
    nmk_metadata['config'][key] = base_metadata['config'][key]
    nmk_metadata['container_config'][key] = base_metadata['container_config'][key]

with open(nmk_json_file, 'w') as f:
    f.write(json.dumps(nmk_metadata))
EOF
}

apply_changed_files_to_source_image() {
    local id
    local image
    local parent
    local tmp_dir
    local tmp_image

    tmp_image=$1
    image=$2

    id=$($_DOCKER inspect --format '{{ .Id }}' $tmp_image)
    parent=$($_DOCKER inspect --format '{{ .Parent }}' $tmp_image)
    tmp_dir=$(mktemp -d --suffix=.nmk)

    pushd -q $tmp_dir
    # extract changed files of last layer
    mkdir image
    $_DOCKER save $tmp_image | tar -xf - -C image
    RUN $_DOCKER rmi --no-prune=true $tmp_image
    gen_restore_script $parent $id > restore-meta-data.py
    python restore-meta-data.py
    tar -c -C image . | $_DOCKER load
    RUN $_DOCKER tag --force $tmp_image $image
    popd -q
    rm -rf $tmp_dir
}

() {
    local source_image=$1
    local injected_image=${2:-$source_image}
    local cid_file="$(mktemp --suffix=.cid --dry-run)"
    local tmp_image

    tmp_image=$(</dev/urandom tr -cd '[:lower:]' | head -c 32)

    RUN $_DOCKER run -v $NMK_DIR:/mnt:ro --cidfile=$cid_file --entrypoint='/bin/sh' "${_ENV[@]}" $source_image /mnt/setup/docker
    local cid="$(<$cid_file)"  # read container id
    RUN $_DOCKER commit $cid $tmp_image
    RUN $_DOCKER rm $cid
    RUN apply_changed_files_to_source_image $tmp_image $injected_image
    RUN $_DOCKER rmi --no-prune=true $tmp_image
    print -- "Source image   : $source_image"
    print -- "Injected image : $injected_image"
} "$@"

# vim: ft=zsh
